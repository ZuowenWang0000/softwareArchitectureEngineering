open util/ordering[Time]

///////////////////////////////////////// ATHLETE, TEAM //////////////////////////////////////////////////

abstract sig Athlete {
    citizenOf: some Country,
    memberOf: some Team
}

sig FemaleAthlete extends Athlete {}
sig MaleAthlete extends Athlete {}

abstract sig Team {
    participant: some Event,
    hasMedal: set Medal,
    consistsOf: some Athlete,    // consists of some atheletes
    represents: one Country
}{
	// Make sure that this Team participates in only one Discipline
	one d: Discipline | (participant in d.composedOfEvent)
	// Make sure that all the Athletes in this Team have a common nationality
	all a: consistsOf | represents in a.citizenOf
    // All teams play in at least one performance
    some p: Performance | this in p.playedBy
}

/////////////////////////////// DISCIPLINE, EVENT, PHASE, PERFORMANCE /////////////////////////////////////

abstract sig Discipline { 
     composedOfEvent: some Event
}

abstract sig Event { 
    composedOfPhase: some Phase,
    awardMedals: some Medal,
    hasParticipatingTeam: some Team,
}{
	// Make sure that at least 3 medals are handed out for this Event
	#getMedals[this] >= 3
	// Make sure that there are at least three participants in this Event
	#getEventParticipants[this] >= 3
	// Make sure this Event is used in exactly one Discipline
	one d: Discipline | this in d.composedOfEvent
}

abstract sig Phase { 
    composedOfPerformance: some Performance,
	successor: set Phase	
}{
	// Make sure that this Phase is part of exactly one Event
	one e: Event | this in e.composedOfPhase
}

abstract sig Performance { 
    startTime: one Time,
    endTime: one Time,
    composedOfScore: one Score,
    playedBy: some Team,
}{
	// Make sure that this Performance is in exactly one Phase
	one p: Phase | this in p.composedOfPerformance
	// Make sure this Performance takes place at exactly one Location
	one loc: Location | this in loc.beingUsedFor
}

//////////////////////////////////////////// LOCATION /////////////////////////////////////////////////////

sig Location { 
    beingUsedFor: some Performance
}

////////////////////////////////////////// MEDAL, SCORE ///////////////////////////////////////////////////

abstract sig Medal {}{
	some e: Event | this in getMedals[e]
	one t: Team | this in t.hasMedal
}

sig GoldMedal extends Medal {}
sig SilverMedal extends Medal {}
sig BronzeMedal extends Medal {}

sig Score {}

////////////////////////////////////////////// TIME ///////////////////////////////////////////////////////

sig Time {}

//////////////////////////////////////////// COUNTRY //////////////////////////////////////////////////////

sig Country {
    hasAthletes: set Athlete,
}

/////////////////////////////////////////////// FACTS ////////////////////////////////////////////////////

fact {/*Team.*/consistsOf = ~/*Athlete.*/memberOf}
fact {/*Country.*/hasAthletes = ~/*Athlete.*/citizenOf}
fact {/*Event.*/hasParticipatingTeam= ~/*Team.*/participant}

// No two performances can have the same Score object
fact {all disj p1, p2: Performance | getScore[p1] != getScore[p2]}

// The end time of a performance must be before the start time
fact {all p: Performance | isBefore[getStart[p], getEnd[p]]}
// Performances must be temporally disjunct if they are at the same location or feature the same athlete
fact {all disj p1, p2: Performance | (sameLocation[p1, p2] or existsCommonAthlete[p1, p2]) => (lte[getEnd[p1],getStart[p2]] || lte[getEnd[p2],getStart[p1]])}

// All events of a phase must be complete before the next phase can start (within an event)
fact {all e: Event | all disj e1, e2: e.composedOfPhase | e1 in e2.successor => isBefore[getHighestEndingTime[e2], getLowestStartingTime[e1]]}

// At least one gold medal
fact {all e: Event | #getGoldMedals[e] >= 1}
// If there is only one gold medal, there must be at least one silver medal
fact {all e: Event | #getGoldMedals[e] = 1 => some getSilverMedals[e]}
// If there is more than one gold medal, there cannot be any silver medals
fact {all e: Event | #getGoldMedals[e] > 1 => no getSilverMedals[e]}
// This one follows from the fact that there are always >=3 medals
//fact {all e: Event | #(getGoldMedals[e] + getSilverMedals[e]) = 2 => some getBronzeMedals[e]}
// If there are several silver medals, there are no bronze medals
fact {all e: Event | #getGoldMedals[e] = 1 and #getSilverMedals[e] >= 2 => no getBronzeMedals[e]}
// This one follows from the fact that there are always >=3 medals
//fact {all e: Event | #getGoldMedals[e] = 2 and no getSilverMedals[e] => some getBronzeMedals[e]}
// If there are >=3 gold medals, there cannot be any other kind of medals
fact {all e: Event | #getGoldMedals[e] >= 3 => no getBronzeMedals[e]}

// At most three Teams per Country per Discipline
fact {all d: Discipline, c: Country | (#getTeamsFromCountryAndDiscipline[c, d] <= 3)}

// No medals can be shared between different events
fact {all disj e1, e2: Event | no (getMedals[e1] & getMedals[e2])}

// A single team cannot win more than one medal of the same event
fact {all t: Team, disj m1, m2: Medal | (m1 in t.hasMedal && m2 in t.hasMedal && some t.hasMedal) => no (m1.~awardMedals & m2.~awardMedals)}

// Only Participating teams can win the medals
fact {all e: Event | e.awardMedals.~hasMedal in e.hasParticipatingTeam}

// Teams playing in performances of events must be in participants of event
fact {all e: Event | e.composedOfPhase.composedOfPerformance.playedBy = e.hasParticipatingTeam}

// Participants cannot be in two teams in the same event   
fact {no disj t1, t2: Team | (some t1.consistsOf & t2.consistsOf) && (some t1.~/*Event.*/hasParticipatingTeam & t2.~/*Event*/hasParticipatingTeam)}

// Phases cannot be successors of themselves
fact {no p: Phase | p in p.successor }

// The successor relation does not span multiple events
fact {all disj p1, p2: Phase | p1 in p2.successor => (some e: Event | (p1 + p2) in getPhases[e])}


/////////////////////////////////////////// PREDICATES ////////////////////////////////////////////////////

// True iff t1 is strictly before t2.
/*template*/ pred isBefore[t1, t2: Time] { lt[t1,t2] }

// True iff p1 is strictly before p2.
/*template*/ pred phaseIsBefore[p1, p2: Phase] { p2 in p1.successor /*&& (some e: Event | (p1 + p2) in getPhases[e])*/ }

// True iff m is a gold medal.
/*template*/ pred isGoldMedal[m : Medal] { m in GoldMedal}

// True iff m is a silver medal.
/*template*/ pred isSilverMedal[m : Medal] { m in SilverMedal}

// True iff m is a bronze medal.
/*template*/ pred isBronzeMedal[m: Medal] { m in BronzeMedal}

// True iff t is among the best teams in phase p.
// Implemented in IceHockeyPart since it is sport-specific
///*template*/ pred isAmongBest[t: Team, p: Phase] {  }

pred sameLocation[p1, p2: Performance] { p1.~beingUsedFor = p2.~beingUsedFor }

pred existsCommonAthlete[p1, p2: Performance] { some (getMembers[getParticipants[p1]] & getMembers[getParticipants[p2]]) }

pred show {	
	some disj p1, p2: Performance | getStart[p1] = getEnd[p2]
	all a: Athlete | #(a.citizenOf) = 1
	one a: Athlete | #(a.memberOf) = 2 and #(getMedalsForTeam[a.memberOf]&GoldMedal)=2
	all t: Team | #(t.hasMedal) = 1
}

//////////////////////////////////////////// FUNCTIONS /////////////////////////////////////////////////////

// Returns all the events offered by the discipline d.
/*template*/ fun getEvents[d: Discipline] : set Event { d.composedOfEvent } 

// Returns all the teams which participate in the event e.
/*template*/ fun getEventParticipants[e: Event] : set Team { e.hasParticipatingTeam }

// Returns all the phases of the event e.
/*template*/ fun getPhases[e: Event] : set Phase { e.composedOfPhase }

// Returns all the performances which take place within the phase p.
/*template*/ fun getPerformances[p: Phase] : set Performance { p.composedOfPerformance }

// Returns the set of medals handed out for the event e.
/*template*/ fun getMedals[e: Event] : set Medal { e.awardMedals }

// Gets all the gold medals handed out for the event e
fun getGoldMedals[e: Event] : set Medal {e.awardMedals & GoldMedal}

// Gets all the silver medals handed out for the event e
fun getSilverMedals[e: Event] : set Medal {e.awardMedals & SilverMedal}

// Gets all the bronze medals handed out for the event e
fun getBronzeMedals[e: Event] : set Medal {e.awardMedals & BronzeMedal}

fun getMedalsForTeam[t: Team] : set Medal {t.hasMedal}

fun getEventForMedal[m: Medal] : set Event {m.~awardMedals}

// Returns the start time of the performance p.
/*template*/ fun getStart[p : Performance] : Time { p.startTime }

// Returns the end time of the performance p.
/*template*/ fun getEnd[p: Performance] : Time { p.endTime }

// Returns the location of the performance p.
/*template*/ fun getLocation[p: Performance] : Location { ~/*Location.*/beingUsedFor[p] } 

// Returns all the teams which participate in the performance p.
/*template*/ fun getParticipants[p: Performance] : set Team { p.playedBy }

// Returns all the athletes which belong to the team t.
/*template*/ fun getMembers[t: Team] : set Athlete { t.consistsOf }

// Returns the team which won the medal m.
/*template*/ fun getWinner[m: Medal] : Team { ~/*Team.*/hasMedal[m] }

// Gets the score of a performance.
fun getScore[p: Performance] : Score { p.composedOfScore }

fun getTeamsFromCountryAndDiscipline[c: Country, d: Discipline] : set Team {
	{t: Team | t in d.composedOfEvent.hasParticipatingTeam and t.represents = c}
}

fun getPhaseParticipants[p: Phase] : set Team { getPerformances[p].playedBy }

fun getHighestEndingTime[e: Phase] : one Time {
	{t: getEndingTimes[e] | (no t1: getEndingTimes[e] | isBefore[t, t1])}
}

fun getEndingTimes[e: Phase] : some Time {getPerformances[e].endTime}

fun getLowestStartingTime[e: Phase] : one Time {
	{t: getStartingTimes[e] | (no t1: getStartingTimes[e] | isBefore[t1, t])}
}

fun getStartingTimes[e: Phase] : some Time {getPerformances[e].startTime}

fun getTeamFromPhase [e: Phase] : some Team {getParticipants[getPerformances[e]]}

fun getTeamsForCountryAndEvent[c: Country, e: Event] : set Team {
	{t: Team | t in getEventParticipants[e] and t.represents = c}
}

//////////////////////////////// PREDICATES FOR SHOWING INSTANCES ///////////////////////////////////////

pred static_instance_2 {
	some disj p1, p2: Performance | getStart[p1] = getEnd[p2] and (some a: Athlete | a in getMembers[getParticipants[p1]] and a in getMembers[getParticipants[p2]])
                                    and (some disj d1, d2: Discipline | p1 in getPerformances[getPhases[getEvents[d1]]] and p2 in getPerformances[getPhases[getEvents[d2]]])
}
run static_instance_2 for 8 but exactly 2 Event, exactly 2 Performance, exactly 2 Discipline, exactly 5 Athlete, exactly 6 Team, exactly 3 Time

pred static_instance_3 {}
run static_instance_3 for 8 but exactly 6 Athlete, exactly 2 Event, exactly 2 Phase, exactly 2 Performance, exactly 6 Team, exactly 7 Country

pred static_instance_4 {
	one a: Athlete | #(a.memberOf) = 2 and #(getMedalsForTeam[a.memberOf] & GoldMedal) = 2
}
run static_instance_4 for 10 but exactly 5 Athlete, exactly 2 Event, exactly 2 Phase, exactly 2 Performance, exactly 6 Team, exactly 3 Time
